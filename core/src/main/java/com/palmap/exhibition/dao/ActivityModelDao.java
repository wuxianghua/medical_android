package com.palmap.exhibition.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.palmap.exhibition.dao.ActivityModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACTIVITY_MODEL.
*/
public class ActivityModelDao extends AbstractDao<ActivityModel, Long> {

    public static final String TABLENAME = "ACTIVITY_MODEL";

    /**
     * Properties of entity ActivityModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AtyId = new Property(1, int.class, "atyId", false, "ATY_ID");
        public final static Property MapId = new Property(2, int.class, "mapId", false, "MAP_ID");
        public final static Property BuildId = new Property(3, int.class, "buildId", false, "BUILD_ID");
        public final static Property FloorId = new Property(4, int.class, "floorId", false, "FLOOR_ID");
        public final static Property PoiId = new Property(5, int.class, "poiId", false, "POI_ID");
        public final static Property ActivityType = new Property(6, String.class, "activityType", false, "ACTIVITY_TYPE");
        public final static Property StartTime = new Property(7, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, String.class, "endTime", false, "END_TIME");
        public final static Property ActivityName = new Property(9, String.class, "activityName", false, "ACTIVITY_NAME");
        public final static Property ActivityDesc = new Property(10, String.class, "activityDesc", false, "ACTIVITY_DESC");
        public final static Property RoomNumber = new Property(11, String.class, "roomNumber", false, "ROOM_NUMBER");
        public final static Property Ext = new Property(12, String.class, "ext", false, "EXT");
        public final static Property State = new Property(13, int.class, "state", false, "STATE");
        public final static Property AimsCount = new Property(14, Integer.class, "aimsCount", false, "AIMS_COUNT");
    };


    public ActivityModelDao(DaoConfig config) {
        super(config);
    }
    
    public ActivityModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACTIVITY_MODEL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ATY_ID' INTEGER NOT NULL UNIQUE ," + // 1: atyId
                "'MAP_ID' INTEGER NOT NULL ," + // 2: mapId
                "'BUILD_ID' INTEGER NOT NULL ," + // 3: buildId
                "'FLOOR_ID' INTEGER NOT NULL ," + // 4: floorId
                "'POI_ID' INTEGER NOT NULL ," + // 5: poiId
                "'ACTIVITY_TYPE' TEXT NOT NULL ," + // 6: activityType
                "'START_TIME' TEXT NOT NULL ," + // 7: startTime
                "'END_TIME' TEXT NOT NULL ," + // 8: endTime
                "'ACTIVITY_NAME' TEXT NOT NULL ," + // 9: activityName
                "'ACTIVITY_DESC' TEXT NOT NULL ," + // 10: activityDesc
                "'ROOM_NUMBER' TEXT NOT NULL ," + // 11: roomNumber
                "'EXT' TEXT NOT NULL ," + // 12: ext
                "'STATE' INTEGER NOT NULL ," + // 13: state
                "'AIMS_COUNT' INTEGER);"); // 14: aimsCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACTIVITY_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActivityModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAtyId());
        stmt.bindLong(3, entity.getMapId());
        stmt.bindLong(4, entity.getBuildId());
        stmt.bindLong(5, entity.getFloorId());
        stmt.bindLong(6, entity.getPoiId());
        stmt.bindString(7, entity.getActivityType());
        stmt.bindString(8, entity.getStartTime());
        stmt.bindString(9, entity.getEndTime());
        stmt.bindString(10, entity.getActivityName());
        stmt.bindString(11, entity.getActivityDesc());
        stmt.bindString(12, entity.getRoomNumber());
        stmt.bindString(13, entity.getExt());
        stmt.bindLong(14, entity.getState());
 
        Integer aimsCount = entity.getAimsCount();
        if (aimsCount != null) {
            stmt.bindLong(15, aimsCount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActivityModel readEntity(Cursor cursor, int offset) {
        ActivityModel entity = new ActivityModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // atyId
            cursor.getInt(offset + 2), // mapId
            cursor.getInt(offset + 3), // buildId
            cursor.getInt(offset + 4), // floorId
            cursor.getInt(offset + 5), // poiId
            cursor.getString(offset + 6), // activityType
            cursor.getString(offset + 7), // startTime
            cursor.getString(offset + 8), // endTime
            cursor.getString(offset + 9), // activityName
            cursor.getString(offset + 10), // activityDesc
            cursor.getString(offset + 11), // roomNumber
            cursor.getString(offset + 12), // ext
            cursor.getInt(offset + 13), // state
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // aimsCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActivityModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAtyId(cursor.getInt(offset + 1));
        entity.setMapId(cursor.getInt(offset + 2));
        entity.setBuildId(cursor.getInt(offset + 3));
        entity.setFloorId(cursor.getInt(offset + 4));
        entity.setPoiId(cursor.getInt(offset + 5));
        entity.setActivityType(cursor.getString(offset + 6));
        entity.setStartTime(cursor.getString(offset + 7));
        entity.setEndTime(cursor.getString(offset + 8));
        entity.setActivityName(cursor.getString(offset + 9));
        entity.setActivityDesc(cursor.getString(offset + 10));
        entity.setRoomNumber(cursor.getString(offset + 11));
        entity.setExt(cursor.getString(offset + 12));
        entity.setState(cursor.getInt(offset + 13));
        entity.setAimsCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActivityModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActivityModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
